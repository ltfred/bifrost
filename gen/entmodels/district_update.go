// Code generated by entc, DO NOT EDIT.

package entmodels

import (
	"bifrost/gen/entmodels/district"
	"bifrost/gen/entmodels/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DistrictUpdate is the builder for updating District entities.
type DistrictUpdate struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// Where adds a new predicate for the builder.
func (du *DistrictUpdate) Where(ps ...predicate.District) *DistrictUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetPid sets the pid field.
func (du *DistrictUpdate) SetPid(u uint64) *DistrictUpdate {
	du.mutation.ResetPid()
	du.mutation.SetPid(u)
	return du
}

// AddPid adds u to pid.
func (du *DistrictUpdate) AddPid(u uint64) *DistrictUpdate {
	du.mutation.AddPid(u)
	return du
}

// SetDistrictName sets the district_name field.
func (du *DistrictUpdate) SetDistrictName(s string) *DistrictUpdate {
	du.mutation.SetDistrictName(s)
	return du
}

// SetShorterName sets the shorter_name field.
func (du *DistrictUpdate) SetShorterName(s string) *DistrictUpdate {
	du.mutation.SetShorterName(s)
	return du
}

// SetCarCode sets the car_code field.
func (du *DistrictUpdate) SetCarCode(s string) *DistrictUpdate {
	du.mutation.SetCarCode(s)
	return du
}

// Mutation returns the DistrictMutation object of the builder.
func (du *DistrictUpdate) Mutation() *DistrictMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DistrictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DistrictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistrictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistrictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DistrictUpdate) check() error {
	if v, ok := du.mutation.DistrictName(); ok {
		if err := district.DistrictNameValidator(v); err != nil {
			return &ValidationError{Name: "district_name", err: fmt.Errorf("entmodels: validator failed for field \"district_name\": %w", err)}
		}
	}
	if v, ok := du.mutation.ShorterName(); ok {
		if err := district.ShorterNameValidator(v); err != nil {
			return &ValidationError{Name: "shorter_name", err: fmt.Errorf("entmodels: validator failed for field \"shorter_name\": %w", err)}
		}
	}
	if v, ok := du.mutation.CarCode(); ok {
		if err := district.CarCodeValidator(v); err != nil {
			return &ValidationError{Name: "car_code", err: fmt.Errorf("entmodels: validator failed for field \"car_code\": %w", err)}
		}
	}
	return nil
}

func (du *DistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   district.Table,
			Columns: district.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: district.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: district.FieldPid,
		})
	}
	if value, ok := du.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: district.FieldPid,
		})
	}
	if value, ok := du.mutation.DistrictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldDistrictName,
		})
	}
	if value, ok := du.mutation.ShorterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldShorterName,
		})
	}
	if value, ok := du.mutation.CarCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldCarCode,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DistrictUpdateOne is the builder for updating a single District entity.
type DistrictUpdateOne struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// SetPid sets the pid field.
func (duo *DistrictUpdateOne) SetPid(u uint64) *DistrictUpdateOne {
	duo.mutation.ResetPid()
	duo.mutation.SetPid(u)
	return duo
}

// AddPid adds u to pid.
func (duo *DistrictUpdateOne) AddPid(u uint64) *DistrictUpdateOne {
	duo.mutation.AddPid(u)
	return duo
}

// SetDistrictName sets the district_name field.
func (duo *DistrictUpdateOne) SetDistrictName(s string) *DistrictUpdateOne {
	duo.mutation.SetDistrictName(s)
	return duo
}

// SetShorterName sets the shorter_name field.
func (duo *DistrictUpdateOne) SetShorterName(s string) *DistrictUpdateOne {
	duo.mutation.SetShorterName(s)
	return duo
}

// SetCarCode sets the car_code field.
func (duo *DistrictUpdateOne) SetCarCode(s string) *DistrictUpdateOne {
	duo.mutation.SetCarCode(s)
	return duo
}

// Mutation returns the DistrictMutation object of the builder.
func (duo *DistrictUpdateOne) Mutation() *DistrictMutation {
	return duo.mutation
}

// Save executes the query and returns the updated entity.
func (duo *DistrictUpdateOne) Save(ctx context.Context) (*District, error) {
	var (
		err  error
		node *District
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DistrictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistrictUpdateOne) SaveX(ctx context.Context) *District {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistrictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DistrictUpdateOne) check() error {
	if v, ok := duo.mutation.DistrictName(); ok {
		if err := district.DistrictNameValidator(v); err != nil {
			return &ValidationError{Name: "district_name", err: fmt.Errorf("entmodels: validator failed for field \"district_name\": %w", err)}
		}
	}
	if v, ok := duo.mutation.ShorterName(); ok {
		if err := district.ShorterNameValidator(v); err != nil {
			return &ValidationError{Name: "shorter_name", err: fmt.Errorf("entmodels: validator failed for field \"shorter_name\": %w", err)}
		}
	}
	if v, ok := duo.mutation.CarCode(); ok {
		if err := district.CarCodeValidator(v); err != nil {
			return &ValidationError{Name: "car_code", err: fmt.Errorf("entmodels: validator failed for field \"car_code\": %w", err)}
		}
	}
	return nil
}

func (duo *DistrictUpdateOne) sqlSave(ctx context.Context) (_node *District, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   district.Table,
			Columns: district.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: district.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing District.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: district.FieldPid,
		})
	}
	if value, ok := duo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: district.FieldPid,
		})
	}
	if value, ok := duo.mutation.DistrictName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldDistrictName,
		})
	}
	if value, ok := duo.mutation.ShorterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldShorterName,
		})
	}
	if value, ok := duo.mutation.CarCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldCarCode,
		})
	}
	_node = &District{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package district

import (
	"bifrost/gen/entmodels/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// DistrictName applies equality check predicate on the "district_name" field. It's identical to DistrictNameEQ.
func DistrictName(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictName), v))
	})
}

// ShorterName applies equality check predicate on the "shorter_name" field. It's identical to ShorterNameEQ.
func ShorterName(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterName), v))
	})
}

// CarCode applies equality check predicate on the "car_code" field. It's identical to CarCodeEQ.
func CarCode(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarCode), v))
	})
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPid), v))
	})
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...uint64) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPid), v...))
	})
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...uint64) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPid), v...))
	})
}

// PidGT applies the GT predicate on the "pid" field.
func PidGT(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPid), v))
	})
}

// PidGTE applies the GTE predicate on the "pid" field.
func PidGTE(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPid), v))
	})
}

// PidLT applies the LT predicate on the "pid" field.
func PidLT(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPid), v))
	})
}

// PidLTE applies the LTE predicate on the "pid" field.
func PidLTE(v uint64) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPid), v))
	})
}

// DistrictNameEQ applies the EQ predicate on the "district_name" field.
func DistrictNameEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictName), v))
	})
}

// DistrictNameNEQ applies the NEQ predicate on the "district_name" field.
func DistrictNameNEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictName), v))
	})
}

// DistrictNameIn applies the In predicate on the "district_name" field.
func DistrictNameIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictName), v...))
	})
}

// DistrictNameNotIn applies the NotIn predicate on the "district_name" field.
func DistrictNameNotIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictName), v...))
	})
}

// DistrictNameGT applies the GT predicate on the "district_name" field.
func DistrictNameGT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictName), v))
	})
}

// DistrictNameGTE applies the GTE predicate on the "district_name" field.
func DistrictNameGTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictName), v))
	})
}

// DistrictNameLT applies the LT predicate on the "district_name" field.
func DistrictNameLT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictName), v))
	})
}

// DistrictNameLTE applies the LTE predicate on the "district_name" field.
func DistrictNameLTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictName), v))
	})
}

// DistrictNameContains applies the Contains predicate on the "district_name" field.
func DistrictNameContains(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictName), v))
	})
}

// DistrictNameHasPrefix applies the HasPrefix predicate on the "district_name" field.
func DistrictNameHasPrefix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictName), v))
	})
}

// DistrictNameHasSuffix applies the HasSuffix predicate on the "district_name" field.
func DistrictNameHasSuffix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictName), v))
	})
}

// DistrictNameEqualFold applies the EqualFold predicate on the "district_name" field.
func DistrictNameEqualFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictName), v))
	})
}

// DistrictNameContainsFold applies the ContainsFold predicate on the "district_name" field.
func DistrictNameContainsFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictName), v))
	})
}

// ShorterNameEQ applies the EQ predicate on the "shorter_name" field.
func ShorterNameEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShorterName), v))
	})
}

// ShorterNameNEQ applies the NEQ predicate on the "shorter_name" field.
func ShorterNameNEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShorterName), v))
	})
}

// ShorterNameIn applies the In predicate on the "shorter_name" field.
func ShorterNameIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShorterName), v...))
	})
}

// ShorterNameNotIn applies the NotIn predicate on the "shorter_name" field.
func ShorterNameNotIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShorterName), v...))
	})
}

// ShorterNameGT applies the GT predicate on the "shorter_name" field.
func ShorterNameGT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShorterName), v))
	})
}

// ShorterNameGTE applies the GTE predicate on the "shorter_name" field.
func ShorterNameGTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShorterName), v))
	})
}

// ShorterNameLT applies the LT predicate on the "shorter_name" field.
func ShorterNameLT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShorterName), v))
	})
}

// ShorterNameLTE applies the LTE predicate on the "shorter_name" field.
func ShorterNameLTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShorterName), v))
	})
}

// ShorterNameContains applies the Contains predicate on the "shorter_name" field.
func ShorterNameContains(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShorterName), v))
	})
}

// ShorterNameHasPrefix applies the HasPrefix predicate on the "shorter_name" field.
func ShorterNameHasPrefix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShorterName), v))
	})
}

// ShorterNameHasSuffix applies the HasSuffix predicate on the "shorter_name" field.
func ShorterNameHasSuffix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShorterName), v))
	})
}

// ShorterNameEqualFold applies the EqualFold predicate on the "shorter_name" field.
func ShorterNameEqualFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShorterName), v))
	})
}

// ShorterNameContainsFold applies the ContainsFold predicate on the "shorter_name" field.
func ShorterNameContainsFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShorterName), v))
	})
}

// CarCodeEQ applies the EQ predicate on the "car_code" field.
func CarCodeEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarCode), v))
	})
}

// CarCodeNEQ applies the NEQ predicate on the "car_code" field.
func CarCodeNEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarCode), v))
	})
}

// CarCodeIn applies the In predicate on the "car_code" field.
func CarCodeIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCarCode), v...))
	})
}

// CarCodeNotIn applies the NotIn predicate on the "car_code" field.
func CarCodeNotIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCarCode), v...))
	})
}

// CarCodeGT applies the GT predicate on the "car_code" field.
func CarCodeGT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarCode), v))
	})
}

// CarCodeGTE applies the GTE predicate on the "car_code" field.
func CarCodeGTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarCode), v))
	})
}

// CarCodeLT applies the LT predicate on the "car_code" field.
func CarCodeLT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarCode), v))
	})
}

// CarCodeLTE applies the LTE predicate on the "car_code" field.
func CarCodeLTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarCode), v))
	})
}

// CarCodeContains applies the Contains predicate on the "car_code" field.
func CarCodeContains(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCarCode), v))
	})
}

// CarCodeHasPrefix applies the HasPrefix predicate on the "car_code" field.
func CarCodeHasPrefix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCarCode), v))
	})
}

// CarCodeHasSuffix applies the HasSuffix predicate on the "car_code" field.
func CarCodeHasSuffix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCarCode), v))
	})
}

// CarCodeEqualFold applies the EqualFold predicate on the "car_code" field.
func CarCodeEqualFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCarCode), v))
	})
}

// CarCodeContainsFold applies the ContainsFold predicate on the "car_code" field.
func CarCodeContainsFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCarCode), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by entc, DO NOT EDIT.

package entmodels

import (
	"bifrost/gen/entmodels/district"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DistrictCreate is the builder for creating a District entity.
type DistrictCreate struct {
	config
	mutation *DistrictMutation
	hooks    []Hook
}

// SetPid sets the pid field.
func (dc *DistrictCreate) SetPid(u uint64) *DistrictCreate {
	dc.mutation.SetPid(u)
	return dc
}

// SetDistrictName sets the district_name field.
func (dc *DistrictCreate) SetDistrictName(s string) *DistrictCreate {
	dc.mutation.SetDistrictName(s)
	return dc
}

// SetShorterName sets the shorter_name field.
func (dc *DistrictCreate) SetShorterName(s string) *DistrictCreate {
	dc.mutation.SetShorterName(s)
	return dc
}

// SetCarCode sets the car_code field.
func (dc *DistrictCreate) SetCarCode(s string) *DistrictCreate {
	dc.mutation.SetCarCode(s)
	return dc
}

// SetID sets the id field.
func (dc *DistrictCreate) SetID(u uint64) *DistrictCreate {
	dc.mutation.SetID(u)
	return dc
}

// Mutation returns the DistrictMutation object of the builder.
func (dc *DistrictCreate) Mutation() *DistrictMutation {
	return dc.mutation
}

// Save creates the District in the database.
func (dc *DistrictCreate) Save(ctx context.Context) (*District, error) {
	var (
		err  error
		node *District
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DistrictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DistrictCreate) SaveX(ctx context.Context) *District {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DistrictCreate) check() error {
	if _, ok := dc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New("entmodels: missing required field \"pid\"")}
	}
	if _, ok := dc.mutation.DistrictName(); !ok {
		return &ValidationError{Name: "district_name", err: errors.New("entmodels: missing required field \"district_name\"")}
	}
	if v, ok := dc.mutation.DistrictName(); ok {
		if err := district.DistrictNameValidator(v); err != nil {
			return &ValidationError{Name: "district_name", err: fmt.Errorf("entmodels: validator failed for field \"district_name\": %w", err)}
		}
	}
	if _, ok := dc.mutation.ShorterName(); !ok {
		return &ValidationError{Name: "shorter_name", err: errors.New("entmodels: missing required field \"shorter_name\"")}
	}
	if v, ok := dc.mutation.ShorterName(); ok {
		if err := district.ShorterNameValidator(v); err != nil {
			return &ValidationError{Name: "shorter_name", err: fmt.Errorf("entmodels: validator failed for field \"shorter_name\": %w", err)}
		}
	}
	if _, ok := dc.mutation.CarCode(); !ok {
		return &ValidationError{Name: "car_code", err: errors.New("entmodels: missing required field \"car_code\"")}
	}
	if v, ok := dc.mutation.CarCode(); ok {
		if err := district.CarCodeValidator(v); err != nil {
			return &ValidationError{Name: "car_code", err: fmt.Errorf("entmodels: validator failed for field \"car_code\": %w", err)}
		}
	}
	return nil
}

func (dc *DistrictCreate) sqlSave(ctx context.Context) (*District, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (dc *DistrictCreate) createSpec() (*District, *sqlgraph.CreateSpec) {
	var (
		_node = &District{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: district.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: district.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Pid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: district.FieldPid,
		})
		_node.Pid = value
	}
	if value, ok := dc.mutation.DistrictName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldDistrictName,
		})
		_node.DistrictName = value
	}
	if value, ok := dc.mutation.ShorterName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldShorterName,
		})
		_node.ShorterName = value
	}
	if value, ok := dc.mutation.CarCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldCarCode,
		})
		_node.CarCode = value
	}
	return _node, _spec
}

// DistrictCreateBulk is the builder for creating a bulk of District entities.
type DistrictCreateBulk struct {
	config
	builders []*DistrictCreate
}

// Save creates the District entities in the database.
func (dcb *DistrictCreateBulk) Save(ctx context.Context) ([]*District, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*District, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DistrictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DistrictCreateBulk) SaveX(ctx context.Context) []*District {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
